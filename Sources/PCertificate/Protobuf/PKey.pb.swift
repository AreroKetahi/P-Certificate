// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: PKey.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

enum PBTransparency: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case `private` // = 0
    case `public` // = 1
    case UNRECOGNIZED(Int)
    
    init() {
        self = .private
    }
    
    init?(rawValue: Int) {
        switch rawValue {
            case 0: self = .private
            case 1: self = .public
            default: self = .UNRECOGNIZED(rawValue)
        }
    }
    
    var rawValue: Int {
        switch self {
            case .private: return 0
            case .public: return 1
            case .UNRECOGNIZED(let i): return i
        }
    }
    
    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static let allCases: [PBTransparency] = [
        .private,
        .public,
    ]
    
}

struct PBKey: @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var version: String = String()
    
    var algorithm: String = String()
    
    var keySize: Int32 = 0
    
    var symmetry: Bool = false
    
    var transparency: PBTransparency = .private
    
    var content: Data = Data()
    
    var digest: String = String()
    
    var id: Data = Data()
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension PBTransparency: SwiftProtobuf._ProtoNameProviding {
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "PRIVATE"),
        1: .same(proto: "PUBLIC"),
    ]
}

extension PBKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "Key"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "version"),
        2: .same(proto: "algorithm"),
        3: .standard(proto: "key_size"),
        4: .same(proto: "symmetry"),
        5: .same(proto: "transparency"),
        6: .same(proto: "content"),
        7: .same(proto: "digest"),
        8: .same(proto: "id"),
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
                case 1: try { try decoder.decodeSingularStringField(value: &self.version) }()
                case 2: try { try decoder.decodeSingularStringField(value: &self.algorithm) }()
                case 3: try { try decoder.decodeSingularInt32Field(value: &self.keySize) }()
                case 4: try { try decoder.decodeSingularBoolField(value: &self.symmetry) }()
                case 5: try { try decoder.decodeSingularEnumField(value: &self.transparency) }()
                case 6: try { try decoder.decodeSingularBytesField(value: &self.content) }()
                case 7: try { try decoder.decodeSingularStringField(value: &self.digest) }()
                case 8: try { try decoder.decodeSingularBytesField(value: &self.id) }()
                default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !self.version.isEmpty {
            try visitor.visitSingularStringField(value: self.version, fieldNumber: 1)
        }
        if !self.algorithm.isEmpty {
            try visitor.visitSingularStringField(value: self.algorithm, fieldNumber: 2)
        }
        if self.keySize != 0 {
            try visitor.visitSingularInt32Field(value: self.keySize, fieldNumber: 3)
        }
        if self.symmetry != false {
            try visitor.visitSingularBoolField(value: self.symmetry, fieldNumber: 4)
        }
        if self.transparency != .private {
            try visitor.visitSingularEnumField(value: self.transparency, fieldNumber: 5)
        }
        if !self.content.isEmpty {
            try visitor.visitSingularBytesField(value: self.content, fieldNumber: 6)
        }
        if !self.digest.isEmpty {
            try visitor.visitSingularStringField(value: self.digest, fieldNumber: 7)
        }
        if !self.id.isEmpty {
            try visitor.visitSingularBytesField(value: self.id, fieldNumber: 8)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func ==(lhs: PBKey, rhs: PBKey) -> Bool {
        if lhs.version != rhs.version {return false}
        if lhs.algorithm != rhs.algorithm {return false}
        if lhs.keySize != rhs.keySize {return false}
        if lhs.symmetry != rhs.symmetry {return false}
        if lhs.transparency != rhs.transparency {return false}
        if lhs.content != rhs.content {return false}
        if lhs.digest != rhs.digest {return false}
        if lhs.id != rhs.id {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}

